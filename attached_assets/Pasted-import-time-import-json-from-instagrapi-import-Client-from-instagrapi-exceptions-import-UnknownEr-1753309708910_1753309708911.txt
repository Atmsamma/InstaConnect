import time
import json
from instagrapi import Client
from instagrapi.exceptions import UnknownError
from utils import load_json, save_json
from triggers import TRIGGERS

bot = Client()
# If your session is stale, run these once:
# bot.login("your_username", "your_password")
# bot.dump_settings("whatclipped_session.json")
bot.load_settings("whatclipped_session.json")

TRACKER_FILE = "output/replied_messages_tracker.json"

# Safe load of our JSON tracker
try:
    with open(TRACKER_FILE, "r", encoding="utf-8") as f:
        replied_tracker = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    replied_tracker = {}
    save_json(TRACKER_FILE, replied_tracker)

print("üöÄ Bot is running... (Ctrl+C to stop)")

def safe_threads(amount=10):
    try:
        return bot.direct_threads(amount=amount)
    except Exception as e:
        print("‚ö†Ô∏è Could not fetch threads:", e)
        return []

def safe_username(user_id):
    try:
        return bot.user_info(user_id).username
    except Exception:
        return f"user_{user_id}"

def try_reply_with_backoff(thread_id, text, retries=3):
    """Try sending a DM reply, backing off on UnknownError."""
    for i in range(retries):
        try:
            bot.direct_answer(thread_id, text)
            return True
        except UnknownError as e:
            print(f"‚ö†Ô∏è UnknownError, retry {i+1}/{retries}: {e}")
            time.sleep(2 ** i)
    return False

def handle_new_dm(thread):
    thread_id = thread.id
    last_seen = replied_tracker.get(thread_id, {}).get("last_replied_msg_id")

    for msg in thread.messages:
        if msg.id == last_seen:
            break  # we‚Äôve already processed up to here

        text = (msg.text or "").lower()
        if any(t in text for t in TRIGGERS) or msg.media_share:
            username = safe_username(msg.user_id)
            print(f"üí¨ Trigger in {thread_id} from @{username}")

            # Our reply text
            reply_text = f"üëã Thanks @{username}, I‚Äôll look into that!"

            success = try_reply_with_backoff(thread_id, reply_text)
            if not success:
                print("‚ùå All retries failed. Marking as seen and skipping.")
                try:
                    bot.direct_send_seen(msg.id)
                except Exception as e:
                    print("‚ö†Ô∏è Couldn‚Äôt mark as seen:", e)

            # Always update tracker so we don‚Äôt loop on this msg again
            replied_tracker[thread_id] = {"last_replied_msg_id": msg.id}
            save_json(TRACKER_FILE, replied_tracker)
            break  # only one reply per scan

        else:
            print(f"‚û°Ô∏è No trigger in msg {msg.id}")

# Main loop
while True:
    try:
        for thread in safe_threads(10):
            if thread.messages:
                handle_new_dm(thread)
        time.sleep(15)
    except KeyboardInterrupt:
        print("üõë Bot stopped by user.")
        break
    except Exception as e:
        print("‚ùå Error in main loop:", e)
        time.sleep(30)
